{"version":3,"sources":["components/NumberField.jsx","components/InputSelect.jsx","App.js","serviceWorker.js","index.js"],"names":["NumberField","props","TextField","type","pattern","InputSelect","handleSelectChange","e","onSelectChange","target","value","handleInputChange","isNaN","Number","onInputChange","this","units","factor","otherProps","style","display","onChange","Select","displayEmpty","map","unit","MenuItem","key","name","React","Component","App","state","volume","volumeFactor","dosage","percent","chlorine","chlorineFactor","updateState","variable","setState","calculateChlorine","amount","parseFloat","chlorineRequired","isFinite","className","Container","maxWidth","Typography","variant","noValidate","autoComplete","label","InputProps","endAdornment","InputAdornment","position","marginTop","toFixed","readOnly","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e8e07a28.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\nexport default function NumberField(props) {\r\n  return (\r\n    <TextField\r\n      type=\"tel\"\r\n      pattern=\"^-?[0-9]\\d*\\.?\\d*$\"\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Select, MenuItem } from \"@material-ui/core\";\r\nimport NumberField from \"./NumberField\";\r\n\r\nclass InputSelect extends React.Component {\r\n\r\n  handleSelectChange = (e) => {\r\n      this.props.onSelectChange(e.target.value);\r\n  }\r\n\r\n  handleInputChange = (e) => {\r\n      if (isNaN(Number(e.target.value))) {\r\n        return;\r\n      }\r\n      this.props.onInputChange(e.target.value);\r\n  }\r\n\r\n  render() {\r\n    let { units, value, factor, ...otherProps } = this.props;\r\n    return (\r\n      <div style={{ display: \"flex\" }}>\r\n        <NumberField {...otherProps} value={value} onChange={this.handleInputChange} />\r\n        <Select displayEmpty value={factor} onChange={this.handleSelectChange}>\r\n          {units.map((unit) => (\r\n            <MenuItem key={unit.name} value={unit.factor}>{unit.name}</MenuItem>\r\n          ))}\r\n        </Select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputSelect;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport { Container, InputAdornment, Typography } from \"@material-ui/core\";\r\nimport InputSelect from \"./components/InputSelect\";\r\nimport NumberField from \"./components/NumberField\";\r\n\r\nclass App extends Component {\r\n  state = { volume: '', volumeFactor: 1, dosage: '', percent: '', chlorine: 0, chlorineFactor: 1000 };\r\n\r\n  units = [\r\n    { name: \"Liters\", factor: 1000 },\r\n    { name: \"Cubic meters\", factor: 1 },\r\n    { name: \"Gallons\", factor: 219.969204701183 },\r\n    { name: \"US Gallons\", factor: 264.172 },\r\n  ]\r\n\r\n  updateState = (variable) => (value) => {\r\n    if (isNaN(Number(value))) {\r\n      return;\r\n    }\r\n    this.setState({ [variable]: value }, () =>\r\n      this.calculateChlorine()\r\n    );\r\n  };\r\n\r\n  calculateChlorine = () => {\r\n    let amount = parseFloat(\r\n      (this.state.dosage * (this.state.volume / this.state.volumeFactor)) / (this.state.percent * 10000)\r\n    );\r\n    let chlorineRequired = \"\";\r\n    if (!isNaN(amount) && isFinite(amount)) {\r\n      chlorineRequired = parseFloat(amount);\r\n    }\r\n\r\n    this.setState({ chlorine: chlorineRequired });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Container maxWidth=\"md\">\r\n          <Typography variant=\"h4\" style={{\"marginBottom\": '1em'}}>Chlorine Dosage Calculator</Typography>\r\n          <form noValidate autoComplete=\"off\">\r\n            <div className=\"text-input\">\r\n              <InputSelect\r\n                label=\"Volume\"\r\n                onInputChange={this.updateState(\"volume\")}\r\n                onSelectChange={this.updateState(\"volumeFactor\")}\r\n                factor={this.state.volumeFactor}\r\n                units={this.units}\r\n              />\r\n            </div>\r\n            <div className=\"text-input\">\r\n              <NumberField\r\n                label=\"Dosage\"\r\n                onChange={(e) => this.updateState(\"dosage\")(e.target.value)}\r\n                value={this.state.dosage}\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"end\">mg/L</InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"text-input\">\r\n              <NumberField\r\n                label=\"Percent\"\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"end\">%</InputAdornment>\r\n                  ),\r\n                }}\r\n                value={this.state.percent}\r\n                onChange={(e) => this.updateState(\"percent\")(e.target.value)}\r\n              />\r\n            </div>\r\n          </form>\r\n          <div className=\"text-input\">\r\n            <Typography variant=\"h5\" style={{ marginTop: \"3em\" }}>Chlorine Required</Typography>\r\n            <InputSelect\r\n              value={parseFloat((this.state.chlorine * this.state.chlorineFactor).toFixed(4))}\r\n              factor={this.state.chlorineFactor}\r\n              InputProps={{\r\n                readOnly: true,\r\n              }}\r\n              onSelectChange={this.updateState(\"chlorineFactor\")}\r\n              units={this.units}\r\n            />\r\n          </div>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}